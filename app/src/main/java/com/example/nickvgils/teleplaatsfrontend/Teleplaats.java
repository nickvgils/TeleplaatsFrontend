package com.example.nickvgils.teleplaatsfrontend;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class Teleplaats extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405162001c8338038062001c83833981018060405260208110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b505092919050505060408051908101604052808281526020013373ffffffffffffffffffffffffffffffffffffffff1681525060046000820151816000019080519060200190620000d89291906200012a565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050620001d9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016d57805160ff19168380011785556200019e565b828001600101855582156200019e579182015b828111156200019d57825182559160200191906001019062000180565b5b509050620001ad9190620001b1565b5090565b620001d691905b80821115620001d2576000816000905550600101620001b8565b5090565b90565b611a9a80620001e96000396000f3fe608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308551a531461009e57806328b30d4214610161578063609406b21461018c5780636c0c27e1146101b75780637150d8ae146101f2578063a4cb5c80146102b5578063b734eb88146105d9578063c4e0b5d31461062a578063fea533cc14610706575b600080fd5b3480156100aa57600080fd5b506100b3610741565b60405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561012557808201518184015260208101905061010a565b50505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561016d57600080fd5b5061017661080b565b6040518082815260200191505060405180910390f35b34801561019857600080fd5b506101a1610811565b6040518082815260200191505060405180910390f35b3480156101c357600080fd5b506101f0600480360360208110156101da57600080fd5b8101908080359060200190929190505050610817565b005b3480156101fe57600080fd5b506102076108d1565b60405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561027957808201518184015260208101905061025e565b50505050905090810190601f1680156102a65780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156102c157600080fd5b506105d7600480360360a08110156102d857600080fd5b81019080803590602001906401000000008111156102f557600080fd5b82018360208201111561030757600080fd5b8035906020019184600183028401116401000000008311171561032957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561038c57600080fd5b82018360208201111561039e57600080fd5b803590602001918460018302840111640100000000831117156103c057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561042357600080fd5b82018360208201111561043557600080fd5b8035906020019184600183028401116401000000008311171561045757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104ba57600080fd5b8201836020820111156104cc57600080fd5b803590602001918460018302840111640100000000831117156104ee57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561055157600080fd5b82018360208201111561056357600080fd5b8035906020019184600183028401116401000000008311171561058557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061099b565b005b3480156105e557600080fd5b50610628600480360360608110156105fc57600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190505050610b77565b005b34801561063657600080fd5b506107046004803603606081101561064d57600080fd5b810190808035906020019064010000000081111561066a57600080fd5b82018360208201111561067c57600080fd5b8035906020019184600183028401116401000000008311171561069e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919050505061133a565b005b34801561071257600080fd5b5061073f6004803603602081101561072957600080fd5b81019080803590602001909291905050506116da565b005b6004806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60025481565b60035481565b3373ffffffffffffffffffffffffffffffffffffffff16600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561087657600080fd5b6001600082815260200190815260200160002060080160009054906101000a900460ff1680156108bf5750600060016000838152602001908152602001600020600b0160020154115b156108ce576108cd81611769565b5b50565b6006806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561096b5780601f106109405761010080835404028352916020019161096b565b820191906000526020600020905b81548152906001019060200180831161094e57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b3373ffffffffffffffffffffffffffffffffffffffff16600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156109fa57600080fd5b610a026117e5565b60c060405190810160405280878152602001868152602001858152602001848152602001600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381525090506002600081548092919060010191905055508060008060025481526020019081526020016000206000820151816000019080519060200190610ab0929190611832565b506020820151816001019080519060200190610acd929190611832565b506040820151816002019080519060200190610aea929190611832565b506060820151816003019080519060200190610b07929190611832565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190610b6b929190611832565b50905050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610bd657600080fd5b610bde6117e5565b60008085815260200190815260200160002060c06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c955780601f10610c6a57610100808354040283529160200191610c95565b820191906000526020600020905b815481529060010190602001808311610c7857829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d375780601f10610d0c57610100808354040283529160200191610d37565b820191906000526020600020905b815481529060010190602001808311610d1a57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dd95780601f10610dae57610100808354040283529160200191610dd9565b820191906000526020600020905b815481529060010190602001808311610dbc57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e7b5780601f10610e5057610100808354040283529160200191610e7b565b820191906000526020600020905b815481529060010190602001808311610e5e57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f735780601f10610f4857610100808354040283529160200191610f73565b820191906000526020600020905b815481529060010190602001808311610f5657829003601f168201915b5050505050815250509050610f866118b2565b610f8e6118dc565b60c0604051908101604052808481526020016004604080519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110465780601f1061101b57610100808354040283529160200191611046565b820191906000526020600020905b81548152906001019060200180831161102957829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020018515158152602001868152602001600015158152602001838152509050600360008154809291906001019190505550806001600060035481526020019081526020016000206000820151816000016000820151816000019080519060200190611114929190611832565b506020820151816001019080519060200190611131929190611832565b50604082015181600201908051906020019061114e929190611832565b50606082015181600301908051906020019061116b929190611832565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906111cf929190611832565b50505060208201518160060160008201518160000190805190602001906111f7929190611832565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505060408201518160080160006101000a81548160ff02191690831515021790555060608201518160090155608082015181600a0160006101000a81548160ff02191690831515021790555060a082015181600b0160008201518160000160008201518160000190805190602001906112b9929190611832565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506020820151816002015560408201518160030160006101000a81548160ff0219169083151502179055505050905050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561139a57600080fd5b6001600083815260200190815260200160002060080160009054906101000a900460ff1680156113e2575060016000838152602001908152602001600020600b016002015481115b1561167f5760408051908101604052808481526020013373ffffffffffffffffffffffffffffffffffffffff1681525060066000820151816000019080519060200190611430929190611832565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506114836118b2565b6060604051908101604052806006604080519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115355780601f1061150a57610100808354040283529160200191611535565b820191906000526020600020905b81548152906001019060200180831161151857829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020018381526020016001600086815260200190815260200160002060080160009054906101000a900460ff16151581525090508060016000858152602001908152602001600020600b016000820151816000016000820151816000019080519060200190611606929190611832565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506020820151816002015560408201518160030160006101000a81548160ff021916908315150217905550905050505b600160008381526020019081526020016000206009015481101580156116c657506001600083815260200190815260200160002060080160009054906101000a900460ff16155b156116d5576116d482611769565b5b505050565b600080828152602001908152602001600020600080820160006116fd919061192a565b60018201600061170d919061192a565b60028201600061171d919061192a565b60038201600061172d919061192a565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600582016000611764919061192a565b505050565b600660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60c06040519081016040528060608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061187357805160ff19168380011785556118a1565b828001600101855582156118a1579182015b828111156118a0578251825591602001919060010190611885565b5b5090506118ae9190611972565b5090565b6080604051908101604052806118c6611997565b8152602001600081526020016000151581525090565b6101e0604051908101604052806118f16119c7565b81526020016118fe611a14565b815260200160001515815260200160008152602001600015158152602001611924611a44565b81525090565b50805460018160011615610100020316600290046000825580601f10611950575061196f565b601f01602090049060005260206000209081019061196e9190611972565b5b50565b61199491905b80821115611990576000816000905550600101611978565b5090565b90565b604080519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60c06040519081016040528060608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604080519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b608060405190810160405280611a58611997565b815260200160008152602001600015158152509056fea165627a7a723058200ca40316db22e2500dab16cea28fd4900dc750b3f08b8191f75dd999f70037db0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
    }

    protected Teleplaats(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Teleplaats(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<Tuple2<String, String>> seller() {
        final Function function = new Function("seller", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple2<String, String>>(
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> phoneid() {
        final Function function = new Function("phoneid", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> orderid() {
        final Function function = new Function("orderid", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<String, String>> buyer() {
        final Function function = new Function("buyer", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple2<String, String>>(
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public static RemoteCall<Teleplaats> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String sellerName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(sellerName)));
        return deployRemoteCall(Teleplaats.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Teleplaats> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String sellerName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(sellerName)));
        return deployRemoteCall(Teleplaats.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addPhone(String IMEI, String model, String brand, String state, String info) {
        final Function function = new Function(
                "addPhone", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(IMEI), 
                new org.web3j.abi.datatypes.Utf8String(model), 
                new org.web3j.abi.datatypes.Utf8String(brand), 
                new org.web3j.abi.datatypes.Utf8String(state), 
                new org.web3j.abi.datatypes.Utf8String(info)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removePhone(BigInteger id) {
        final Function function = new Function(
                "removePhone", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addOrder(BigInteger id, BigInteger price, Boolean isBet) {
        final Function function = new Function(
                "addOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Bool(isBet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyOrder(String buyerName, BigInteger id, BigInteger price) {
        final Function function = new Function(
                "buyOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(buyerName), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> acceptBet(BigInteger id) {
        final Function function = new Function(
                "acceptBet", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static Teleplaats load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Teleplaats(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Teleplaats load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Teleplaats(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
